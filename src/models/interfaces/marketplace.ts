// src/models/interfaces/marketplace.ts

// UserRole (if not already defined elsewhere, e.g., in user.ts)
export type UserRole = 'buyer' | 'miner' | 'admin';

export interface MineralListingData {
  seller_id: number;
  mineralType: string;
  quantity: number;
  unit: string;
  pricePerUnit: number;
  currency: string;
  location: string;
  description?: string | null;
  status?: 'available' | 'pending' | 'sold' | 'canceled';
  images?: string[];
  listed_date?: string; // ISO date string
  last_updated?: string; // ISO date string
  created_at?: string;
  updated_at?: string;
}

export interface ComplianceData {
  // Define compliance data fields here if needed
  // e.g., certificate_id: string;
  //       issue_date: string;
}

export interface MineralListingFilter {
  mineral_type?: string;
  location?: string;
  status?: 'available' | 'pending' | 'sold' | 'canceled';
  min_price?: number;
  max_price?: number;
  sort_by?: 'created_at' | 'price_per_unit' | 'quantity';
  sort_direction?: 'asc' | 'desc';
  limit?: number;
  page?: number;
}

export interface MineralOffer {
  id?: number; // Optional as it's generated by DB
  listing_id: number;
  buyer_id: number;
  offer_price: number;
  currency: string;
  offer_quantity: number;
  status?: 'pending' | 'accepted' | 'rejected' | 'expired' | 'completed'; // Added 'completed'
  message?: string | null;
  expiry_date?: string | null; // ISO date string
  created_at?: string;
  updated_at?: string;
  // Properties that might come from backend joins (for display purposes):
  buyer_first_name?: string;
  buyer_last_name?: string;
  listing_mineral_type?: string;
  listing_location?: string;
  listing_price_per_unit?: number;
  listing_quantity?: number;
  listing_currency?: string;
}

// ADDED: TransactionStatus type definition
export type TransactionStatus = 'pending' | 'completed' | 'failed' | 'refunded';

export interface Transaction {
  id?: number; // Optional as it's generated by DB
  listing_id: number;
  buyer_id: number;
  seller_id: number;
  offer_id?: number | null; // Can be null if direct purchase
  final_price: number;
  final_quantity: number;
  currency: string;
  transaction_date?: string; // ISO date string, typically auto-generated
  status: TransactionStatus; // Use the new TransactionStatus type
  payment_gateway_id?: string | null;
  created_at?: string;
  updated_at?: string;
}

export interface WebhookEvent {
  // Define webhook event structure if needed for type safety
  // This will depend on the payment gateway's webhook payload
  type: string;
  data: any; // Use a more specific type if possible
  // ... other webhook specific fields
}
